
name: Azure OpenAI Deployment

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'apply'
        type: choice
        options:
          - plan
          - apply
          - destroy
permissions:
      id-token: write
      contents: read
jobs:
  terraform:
    runs-on: ubuntu-latest
    env:
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_USE_OIDC: true
      # TF_LOG: DEBUG
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.4.0'

      - name: Login to Azure
        uses: azure/login@v1
        with:
         client-id: ${{ secrets.AZURE_CLIENT_ID }}
         tenant-id: ${{ secrets.AZURE_TENANT_ID }}
         subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Initialize Terraform
        run: terraform init
        working-directory: terraform

      # - name: Force Unlock Terraform State (if locked)
      #   continue-on-error: true
      #   run: terraform force-unlock -force 3a81d085-f6e7-ec73-972c-bce2e7ae77f0
      #   working-directory: terraform

      - name: Terraform Plan
        id: plan
        if: github.event.inputs.action == 'plan'
        run: |
          terraform plan -out=tfplan -lock=false -input=false \
          -var "subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" \
          -var "client_id=${{ secrets.AZURE_CLIENT_ID }}" \
          -var "tenant_id=${{ secrets.AZURE_TENANT_ID }}"
        working-directory: terraform

      - name: Terraform Apply
        if: github.event.inputs.action == 'apply'
        run: |
          terraform apply -auto-approve -input=false \
          -var "subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" \
          -var "client_id=${{ secrets.AZURE_CLIENT_ID }}" \
          -var "tenant_id=${{ secrets.AZURE_TENANT_ID }}"
        working-directory: terraform

      - name: Terraform Destroy
        if: github.event.inputs.action == 'destroy'
        run: |
          terraform destroy -auto-approve -input=false \
          -var "subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" \
          -var "client_id=${{ secrets.AZURE_CLIENT_ID }}" \
          -var "tenant_id=${{ secrets.AZURE_TENANT_ID }}"
        working-directory: terraform

      - name: Print output
        run: echo "Reusable workflow output ${{ needs.plan.outputs.result }}"
