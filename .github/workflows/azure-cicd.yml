name: Auto-Healing Deployment Pipeline

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'apply'
        type: choice
        options:
          - plan
          - apply
          - destroy

permissions:
  id-token: write
  contents: write
  pull-requests: write

jobs:
  terraform_plan:
    name: Terraform Plan
    uses: ./.github/workflows/terraform-reusable.yml
    with:
      action: plan
      working-directory: terraform
    secrets:
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
    if: github.event.inputs.action == 'plan'

  terraform_apply:
    name: Terraform Apply
    uses: ./.github/workflows/terraform-reusable.yml
    with:
      action: apply
      working-directory: terraform
    secrets:
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
    if: github.event.inputs.action == 'apply'

  terraform_destroy:
    name: Terraform Destroy
    uses: ./.github/workflows/terraform-reusable.yml
    with:
      action: destroy
      working-directory: terraform
    secrets:
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
    if: github.event.inputs.action == 'destroy'

  capture_job_errors:
    name: Capture Job Errors and Fetch Logs
    runs-on: ubuntu-latest
    needs: [terraform_plan, terraform_apply, terraform_destroy]  # Runs after all jobs
    if: always()  # Ensures execution even if previous jobs fail
    steps:
      - name: Get Workflow Run Jobs (Failed Only)
        run: |
          FAILED_JOBS=$(gh api repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/jobs --jq '.jobs[] | select(.conclusion=="failure") | "\(.id) \(.name)"')
          
          echo "FAILED_JOBS<<EOF" >> $GITHUB_ENV
          echo "$FAILED_JOBS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          echo "Captured Failed Job Details:"
          echo "$FAILED_JOBS"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Debug Failed Job Details
        run: |
          echo "Failed Jobs Retrieved:"
          echo "$FAILED_JOBS"

      - name: Fetch and Extract Errors from Logs
        run: |
          echo "Extracting errors from failed job logs..." > errors.log
          
          while IFS= read -r line; do
            JOB_ID=$(echo $line | awk '{print $1}')
            JOB_NAME=$(echo $line | awk '{print substr($0, index($0,$2))}')
            
            echo "Fetching logs for Job ID: $JOB_ID, Job Name: $JOB_NAME"
            
            gh api repos/${{ github.repository }}/actions/jobs/${JOB_ID}/logs > job_${JOB_ID}.log
            
            # Extract only error messages from the log file
            grep -i "error" job_${JOB_ID}.log >> errors.log || echo "No errors found for $JOB_NAME"

          done <<< "$FAILED_JOBS"

          echo "Extracted Errors:"
          cat errors.log
          
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
