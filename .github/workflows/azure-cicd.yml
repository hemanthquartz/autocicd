name: Auto-Healing Deployment Pipeline

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'apply'
        type: choice
        options:
          - plan
          - apply
          - destroy

permissions:
  id-token: write
  contents: write
  pull-requests: write

jobs:
  terraform_setup:
    name: Terraform Setup
    runs-on: ubuntu-latest
    needs: [read_optumfile]
    env:
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_USE_OIDC: true
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.4.0'

      - name: Login to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Initialize Terraform
        run: terraform init
        working-directory: terraform

  terraform_plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: [terraform_setup]
    if: github.event.inputs.action == 'plan'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Run Terraform Plan
        run: |
          terraform plan -out=tfplan -lock=false -input=false \
          -var "subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" \
          -var "client_id=${{ secrets.AZURE_CLIENT_ID }}" \
          -var "tenant_id=${{ secrets.AZURE_TENANT_ID }}"
        working-directory: terraform

  terraform_apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: [terraform_setup]
    if: github.event.inputs.action == 'apply'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Run Terraform Apply
        run: |
          terraform apply -auto-approve -input=false \
          -var "subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" \
          -var "client_id=${{ secrets.AZURE_CLIENT_ID }}" \
          -var "tenant_id=${{ secrets.AZURE_TENANT_ID }}"
        working-directory: terraform

  terraform_destroy:
    name: Terraform Destroy
    runs-on: ubuntu-latest
    needs: [terraform_setup]
    if: github.event.inputs.action == 'destroy'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Run Terraform Destroy
        run: |
          terraform destroy -auto-approve -input=false \
          -var "subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" \
          -var "client_id=${{ secrets.AZURE_CLIENT_ID }}" \
          -var "tenant_id=${{ secrets.AZURE_TENANT_ID }}"
        working-directory: terraform

